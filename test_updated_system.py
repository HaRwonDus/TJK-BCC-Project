#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –ò–ò –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    try:
        from ai.analytics import Analytics
        print("‚úÖ Analytics –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        from ai.product_analyzer import ProductAnalyzer
        print("‚úÖ ProductAnalyzer –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        from ai.recommendations import llm_generate_push
        print("‚úÖ llm_generate_push –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        from back.csvgenerator import CSVGenerator
        print("‚úÖ CSVGenerator –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_single_client():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        from ai.analytics import Analytics
        from ai.product_analyzer import ProductAnalyzer
        from ai.recommendations import llm_generate_push
        
        print("\n=== –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ 1 ===")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        analytics = Analytics()
        client_data = analytics.analyze_client(1)
        print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç: {client_data['name']}")
        print(f"   –ì–æ—Ä–æ–¥: {client_data['city']}")
        print(f"   –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {list(client_data['top_categories'].keys())[:3]}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
        product_analyzer = ProductAnalyzer()
        best_product = product_analyzer.analyze_products(client_data)
        print(f"‚úÖ –õ—É—á—à–∏–π –ø—Ä–æ–¥—É–∫—Ç: {best_product['name']}")
        print(f"   –°–∫–æ—Ä: {best_product['score']:.2f}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—à —Å –ø–æ–º–æ—â—å—é –ò–ò
        top_categories = list(client_data['top_categories'].keys())[:3]
        benefit_sum = best_product['score'] * 1000
        
        push_notification = llm_generate_push(
            name=client_data['name'],
            product=best_product['name'],
            top_categories=top_categories,
            benefit_sum=benefit_sum
        )
        
        print(f"‚úÖ –ü—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {push_notification}")
        print(f"   –î–ª–∏–Ω–∞: {len(push_notification)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã TJK-BCC-Project")
    print("=" * 60)
    
    # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤
    if not test_imports():
        print("\n‚ùå –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–µ–ª")
        return False
    
    # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    if not test_single_client():
        print("\n‚ùå –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –ø—Ä–æ—à–µ–ª")
        return False
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å –ò–ò –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
